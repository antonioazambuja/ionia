package v1

import (
	"testing"

	rsc_v1 "github.com/antonioazambuja/ionia/app/resources/api/v1"
	"github.com/stretchr/testify/assert"
)

func TestRiotAPIGetSummonerByName(test *testing.T) {
	test.Parallel()
	assert := assert.New(test)
	summonerName := "IsBlackPanther"
	riotAPIClient := mockRiotClient{}
	summoner := rsc_v1.NewSummoner()
	summonerDTO, errSummonerDTO := riotAPIClient.GetSummonerByName(summonerName)
	assert.Nil(errSummonerDTO)
	summoner.WithSummonerInfo(summonerDTO)
	assert.Equal("IsBlackPanther", summoner.SummonerName)
	assert.Equal("rsvKSJAKKjeis90", summoner.AccountID)
	assert.Equal(1, summoner.ProfileIconID)
	assert.Equal("1", summoner.Puuid)
	assert.Equal(12122345, summoner.RevisionDate)
	assert.Equal("90opdlsjdnJAKdso", summoner.SummonerID)
	assert.Equal(1, summoner.SummonerLevel)
	matchlistDTO, errMatchlistDTO := riotAPIClient.GetSummonerMatchesByAccountID(summonerDTO.AccountID)
	assert.Nil(errMatchlistDTO)
	summoner.WithMatchesInfo(matchlistDTO)
	assert.Len(summoner.MatchesInfo, summoner.TotalGames)
	assert.Equal(1995205271, summoner.MatchesInfo[0].GameID)
	assert.Equal("SOLO", summoner.MatchesInfo[0].Role)
	assert.Equal(13, summoner.MatchesInfo[0].Season)
	assert.Equal("BR1", summoner.MatchesInfo[0].PlatformID)
	assert.Equal(39, summoner.MatchesInfo[0].Champion)
	assert.Equal(440, summoner.MatchesInfo[0].Queue)
	assert.Equal("MID", summoner.MatchesInfo[0].Lane)
	assert.Equal(1594174353091, summoner.MatchesInfo[0].Timestamp)
	assert.Equal(2, summoner.TotalGames)
	assert.Len(summoner.MatchesInfo, 2)
	leagueEntryDTO, errLeagueEntryDTO := riotAPIClient.GetSummonerLeaguesByID(summonerDTO.ID)
	assert.Nil(errLeagueEntryDTO)
	summoner.WithLeagueInfo(leagueEntryDTO)
	assert.Equal("b80abef5-2b55-4fc6-ba48-88331795255c", summoner.LeagueInfo[0].LeagueID)
	assert.Equal("RANKED_SOLO_5x5", summoner.LeagueInfo[0].QueueType)
	assert.Equal("PLATINUM", summoner.LeagueInfo[0].Tier)
	assert.Equal("II", summoner.LeagueInfo[0].Rank)
	assert.Equal(12, summoner.LeagueInfo[0].LeaguePoints)
	assert.Equal(17, summoner.LeagueInfo[0].Wins)
	assert.Equal(24, summoner.LeagueInfo[0].Losses)
	assert.Equal(rsc_v1.MiniSeriesDTO{}, summoner.LeagueInfo[0].MiniSeriesDTO)
}

func TestRiotAPIGetInfoSummonerByName(test *testing.T) {
	test.Parallel()
	assert := assert.New(test)
	summonerName := "IsBlackPanther"
	riotAPIClient := mockRiotClient{}
	summoner := rsc_v1.NewSummoner()
	summonerDTO, errSummonerDTO := riotAPIClient.GetSummonerByName(summonerName)
	assert.Nil(errSummonerDTO)
	summoner.WithSummonerInfo(summonerDTO)
	assert.Equal("IsBlackPanther", summoner.SummonerName)
	assert.Equal("rsvKSJAKKjeis90", summoner.AccountID)
	assert.Equal(1, summoner.ProfileIconID)
	assert.Equal("1", summoner.Puuid)
	assert.Equal(12122345, summoner.RevisionDate)
	assert.Equal("90opdlsjdnJAKdso", summoner.SummonerID)
	assert.Equal(1, summoner.SummonerLevel)
}

func TestRiotAPIGetLeagueSummonerByName(test *testing.T) {
	test.Parallel()
	assert := assert.New(test)
	summonerName := "IsBlackPanther"
	riotAPIClient := mockRiotClient{}
	summoner := rsc_v1.NewSummoner()
	summonerDTO, errSummonerDTO := riotAPIClient.GetSummonerByName(summonerName)
	assert.Nil(errSummonerDTO)
	summoner.WithSummonerInfo(summonerDTO)
	assert.Equal("IsBlackPanther", summoner.SummonerName)
	assert.Equal("rsvKSJAKKjeis90", summoner.AccountID)
	assert.Equal(1, summoner.ProfileIconID)
	assert.Equal("1", summoner.Puuid)
	assert.Equal(12122345, summoner.RevisionDate)
	assert.Equal("90opdlsjdnJAKdso", summoner.SummonerID)
	assert.Equal(1, summoner.SummonerLevel)
	leagueEntryDTO, errLeagueEntryDTO := riotAPIClient.GetSummonerLeaguesByID(summonerDTO.ID)
	assert.Nil(errLeagueEntryDTO)
	summoner.WithLeagueInfo(leagueEntryDTO)
	assert.Equal("b80abef5-2b55-4fc6-ba48-88331795255c", summoner.LeagueInfo[0].LeagueID)
	assert.Equal("RANKED_SOLO_5x5", summoner.LeagueInfo[0].QueueType)
	assert.Equal("PLATINUM", summoner.LeagueInfo[0].Tier)
	assert.Equal("II", summoner.LeagueInfo[0].Rank)
	assert.Equal(12, summoner.LeagueInfo[0].LeaguePoints)
	assert.Equal(17, summoner.LeagueInfo[0].Wins)
	assert.Equal(24, summoner.LeagueInfo[0].Losses)
	assert.Equal(rsc_v1.MiniSeriesDTO{}, summoner.LeagueInfo[0].MiniSeriesDTO)
}

func TestRiotAPIGetMatchesSummonerByName(test *testing.T) {
	test.Parallel()
	assert := assert.New(test)
	summonerName := "IsBlackPanther"
	riotAPIClient := mockRiotClient{}
	summoner := rsc_v1.NewSummoner()
	summonerDTO, errSummonerDTO := riotAPIClient.GetSummonerByName(summonerName)
	assert.Nil(errSummonerDTO)
	summoner.WithSummonerInfo(summonerDTO)
	assert.Equal("IsBlackPanther", summoner.SummonerName)
	assert.Equal("rsvKSJAKKjeis90", summoner.AccountID)
	assert.Equal(1, summoner.ProfileIconID)
	assert.Equal("1", summoner.Puuid)
	assert.Equal(12122345, summoner.RevisionDate)
	assert.Equal("90opdlsjdnJAKdso", summoner.SummonerID)
	assert.Equal(1, summoner.SummonerLevel)
	matchlistDTO, errMatchlistDTO := riotAPIClient.GetSummonerMatchesByAccountID(summonerDTO.AccountID)
	assert.Nil(errMatchlistDTO)
	summoner.WithMatchesInfo(matchlistDTO)
	assert.Len(summoner.MatchesInfo, summoner.TotalGames)
	assert.Equal(1995205271, summoner.MatchesInfo[0].GameID)
	assert.Equal("SOLO", summoner.MatchesInfo[0].Role)
	assert.Equal(13, summoner.MatchesInfo[0].Season)
	assert.Equal("BR1", summoner.MatchesInfo[0].PlatformID)
	assert.Equal(39, summoner.MatchesInfo[0].Champion)
	assert.Equal(440, summoner.MatchesInfo[0].Queue)
	assert.Equal("MID", summoner.MatchesInfo[0].Lane)
	assert.Equal(1594174353091, summoner.MatchesInfo[0].Timestamp)
	assert.Equal(2, summoner.TotalGames)
	assert.Len(summoner.MatchesInfo, 2)
}

func TestRiotAPIGetMatchesCurrentYear(test *testing.T) {
	test.Parallel()
	assert := assert.New(test)
	summonerName := "IsBlackPanther"
	riotAPIClient := mockRiotClient{}
	summoner := rsc_v1.NewSummoner()
	summonerDTO, errSummonerDTO := riotAPIClient.GetSummonerByName(summonerName)
	assert.Nil(errSummonerDTO)
	summoner.WithSummonerInfo(summonerDTO)
	assert.Equal("IsBlackPanther", summoner.SummonerName)
	assert.Equal("rsvKSJAKKjeis90", summoner.AccountID)
	assert.Equal(1, summoner.ProfileIconID)
	assert.Equal("1", summoner.Puuid)
	assert.Equal(12122345, summoner.RevisionDate)
	assert.Equal("90opdlsjdnJAKdso", summoner.SummonerID)
	assert.Equal(1, summoner.SummonerLevel)
	matchlistDTO, errMatchlistDTO := riotAPIClient.GetMatchesCurrentYear(summonerDTO.AccountID)
	assert.Nil(errMatchlistDTO)
	summoner.WithMatchesInfo(matchlistDTO)
	assert.Len(summoner.MatchesInfo, summoner.TotalGames)
	assert.Equal(1995205271, summoner.MatchesInfo[0].GameID)
	assert.Equal("SOLO", summoner.MatchesInfo[0].Role)
	assert.Equal(13, summoner.MatchesInfo[0].Season)
	assert.Equal("BR1", summoner.MatchesInfo[0].PlatformID)
	assert.Equal(39, summoner.MatchesInfo[0].Champion)
	assert.Equal(440, summoner.MatchesInfo[0].Queue)
	assert.Equal("MID", summoner.MatchesInfo[0].Lane)
	assert.Equal(1594174353091, summoner.MatchesInfo[0].Timestamp)
	assert.Equal(2, summoner.TotalGames)
	assert.Len(summoner.MatchesInfo, 2)
}

func TestRiotAPIGetMatchesCurrentMonth(test *testing.T) {
	test.Parallel()
	assert := assert.New(test)
	summonerName := "IsBlackPanther"
	riotAPIClient := mockRiotClient{}
	summoner := rsc_v1.NewSummoner()
	summonerDTO, errSummonerDTO := riotAPIClient.GetSummonerByName(summonerName)
	assert.Nil(errSummonerDTO)
	summoner.WithSummonerInfo(summonerDTO)
	assert.Equal("IsBlackPanther", summoner.SummonerName)
	assert.Equal("rsvKSJAKKjeis90", summoner.AccountID)
	assert.Equal(1, summoner.ProfileIconID)
	assert.Equal("1", summoner.Puuid)
	assert.Equal(12122345, summoner.RevisionDate)
	assert.Equal("90opdlsjdnJAKdso", summoner.SummonerID)
	assert.Equal(1, summoner.SummonerLevel)
	matchlistDTO, errMatchlistDTO := riotAPIClient.GetMatchesCurrentMonth(summonerDTO.AccountID)
	assert.Nil(errMatchlistDTO)
	summoner.WithMatchesInfo(matchlistDTO)
	assert.Len(summoner.MatchesInfo, summoner.TotalGames)
	assert.Equal(1995205271, summoner.MatchesInfo[0].GameID)
	assert.Equal("SOLO", summoner.MatchesInfo[0].Role)
	assert.Equal(13, summoner.MatchesInfo[0].Season)
	assert.Equal("BR1", summoner.MatchesInfo[0].PlatformID)
	assert.Equal(39, summoner.MatchesInfo[0].Champion)
	assert.Equal(440, summoner.MatchesInfo[0].Queue)
	assert.Equal("MID", summoner.MatchesInfo[0].Lane)
	assert.Equal(1594174353091, summoner.MatchesInfo[0].Timestamp)
	assert.Equal(2, summoner.TotalGames)
	assert.Len(summoner.MatchesInfo, 2)
}

func TestRiotAPIGetMatchesCurrentDay(test *testing.T) {
	test.Parallel()
	assert := assert.New(test)
	summonerName := "IsBlackPanther"
	riotAPIClient := mockRiotClient{}
	summoner := rsc_v1.NewSummoner()
	summonerDTO, errSummonerDTO := riotAPIClient.GetSummonerByName(summonerName)
	assert.Nil(errSummonerDTO)
	summoner.WithSummonerInfo(summonerDTO)
	assert.Equal("IsBlackPanther", summoner.SummonerName)
	assert.Equal("rsvKSJAKKjeis90", summoner.AccountID)
	assert.Equal(1, summoner.ProfileIconID)
	assert.Equal("1", summoner.Puuid)
	assert.Equal(12122345, summoner.RevisionDate)
	assert.Equal("90opdlsjdnJAKdso", summoner.SummonerID)
	assert.Equal(1, summoner.SummonerLevel)
	matchlistDTO, errMatchlistDTO := riotAPIClient.GetMatchesCurrentDay(summonerDTO.AccountID)
	assert.Nil(errMatchlistDTO)
	summoner.WithMatchesInfo(matchlistDTO)
	assert.Len(summoner.MatchesInfo, summoner.TotalGames)
	assert.Equal(1995205271, summoner.MatchesInfo[0].GameID)
	assert.Equal("SOLO", summoner.MatchesInfo[0].Role)
	assert.Equal(13, summoner.MatchesInfo[0].Season)
	assert.Equal("BR1", summoner.MatchesInfo[0].PlatformID)
	assert.Equal(39, summoner.MatchesInfo[0].Champion)
	assert.Equal(440, summoner.MatchesInfo[0].Queue)
	assert.Equal("MID", summoner.MatchesInfo[0].Lane)
	assert.Equal(1594174353091, summoner.MatchesInfo[0].Timestamp)
	assert.Equal(2, summoner.TotalGames)
	assert.Len(summoner.MatchesInfo, 2)
}
